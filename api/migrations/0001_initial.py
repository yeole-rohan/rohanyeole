# Generated by Django 5.1.7 on 2025-03-27 05:30

import django.contrib.auth.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A universally unique identifier (UUID) for this record.', primary_key=True, serialize=False, unique=True, verbose_name='Unique Identifier')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ValidEmail',
            fields=[
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag. If true, the record is considered deleted but still exists in the database.', verbose_name='Is Deleted')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this record was created.', verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='The date and time when this record was last updated.', verbose_name='Last Modified')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A universally unique identifier (UUID) for this record.', primary_key=True, serialize=False, unique=True, verbose_name='Unique Identifier')),
                ('email', models.EmailField(help_text='Enter the email address that needs to be validated.', max_length=254, unique=True, verbose_name='Email Address')),
            ],
            options={
                'verbose_name': 'Valid Email',
                'verbose_name_plural': 'Valid Emails',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='api_validem_email_2e1293_idx'), models.Index(fields=['is_deleted'], name='api_validem_is_dele_e3a03e_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('email__contains', '@')), name='email_must_have_at_symbol')],
                'unique_together': {('email',)},
            },
        ),
    ]
